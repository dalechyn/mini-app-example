diff --git a/node_modules/frog/_lib/web/actions/internal/jsonRpc/postJsonRpcRequestMessage.js b/node_modules/frog/_lib/web/actions/internal/jsonRpc/postJsonRpcRequestMessage.js
index 8a79430..006062e 100644
--- a/node_modules/frog/_lib/web/actions/internal/jsonRpc/postJsonRpcRequestMessage.js
+++ b/node_modules/frog/_lib/web/actions/internal/jsonRpc/postJsonRpcRequestMessage.js
@@ -1,21 +1,20 @@
-export function postJsonRpcRequestMessage(method, parameters, requestIdOverride) {
-    if (typeof window === 'undefined')
-        throw new Error('`postJsonRpcRequestMessage` must be called in the Client Component.');
-    const requestId = requestIdOverride ?? crypto.randomUUID();
-    const message = {
-        jsonrpc: '2.0',
-        id: requestId,
-        method,
-        params: parameters,
-    };
-    // ref: https://github.com/react-native-webview/react-native-webview/blob/master/docs/Guide.md#the-windowreactnativewebviewpostmessage-method-and-onmessage-prop
-    if (window.ReactNativeWebView) {
-        ;
-        window.ReactNativeWebView?.postMessage(JSON.stringify(message));
-    }
-    else {
-        window.parent.postMessage(message, '*');
-    }
-    return requestId;
+export function postJsonRpcRequestMessage(
+	method,
+	parameters,
+	requestIdOverride,
+) {
+	if (typeof window === "undefined")
+		throw new Error(
+			"`postJsonRpcRequestMessage` must be called in the Client Component.",
+		);
+	const requestId = requestIdOverride ?? crypto.randomUUID();
+	const message = {
+		jsonrpc: "2.0",
+		id: requestId,
+		method,
+		params: parameters,
+	};
+	window.parent.postMessage(message, "*");
+	return requestId;
 }
 //# sourceMappingURL=postJsonRpcRequestMessage.js.map
diff --git a/node_modules/frog/web/actions/internal/jsonRpc/postJsonRpcRequestMessage.ts b/node_modules/frog/web/actions/internal/jsonRpc/postJsonRpcRequestMessage.ts
index a78193a..0be7e71 100644
--- a/node_modules/frog/web/actions/internal/jsonRpc/postJsonRpcRequestMessage.ts
+++ b/node_modules/frog/web/actions/internal/jsonRpc/postJsonRpcRequestMessage.ts
@@ -1,40 +1,25 @@
-import type { JsonRpcMethod } from './types.js'
+import type { JsonRpcMethod } from "./types.js";
 
-export type PostJsonRpcRequestMessageReturnType = string
+export type PostJsonRpcRequestMessageReturnType = string;
 
 export function postJsonRpcRequestMessage(
-  method: JsonRpcMethod,
-  parameters: any,
-  requestIdOverride?: string,
+	method: JsonRpcMethod,
+	parameters: any,
+	requestIdOverride?: string,
 ): PostJsonRpcRequestMessageReturnType {
-  if (typeof window === 'undefined')
-    throw new Error(
-      '`postJsonRpcRequestMessage` must be called in the Client Component.',
-    )
+	if (typeof window === "undefined")
+		throw new Error(
+			"`postJsonRpcRequestMessage` must be called in the Client Component.",
+		);
 
-  const requestId = requestIdOverride ?? crypto.randomUUID()
-  const message = {
-    jsonrpc: '2.0',
-    id: requestId,
-    method,
-    params: parameters,
-  }
+	const requestId = requestIdOverride ?? crypto.randomUUID();
+	const message = {
+		jsonrpc: "2.0",
+		id: requestId,
+		method,
+		params: parameters,
+	};
 
-  // ref: https://github.com/react-native-webview/react-native-webview/blob/master/docs/Guide.md#the-windowreactnativewebviewpostmessage-method-and-onmessage-prop
-  if (
-    (
-      window as {
-        ReactNativeWebView?: any
-      }
-    ).ReactNativeWebView
-  ) {
-    ;(
-      window as {
-        ReactNativeWebView?: { postMessage: (msg: string) => void }
-      }
-    ).ReactNativeWebView?.postMessage(JSON.stringify(message))
-  } else {
-    window.parent.postMessage(message, '*')
-  }
-  return requestId
+	window.parent.postMessage(message, "*");
+	return requestId;
 }
